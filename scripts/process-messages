#!/usr/bin/env python

## -- Python Setup -- ##
import os.path
import sys

PROJECT_ROOT = os.path.normpath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, os.path.join(PROJECT_ROOT, '..'))

## -- Django Setup -- ##
from django.core.management import setup_environ
from thialfi import settings
setup_environ(settings)

## -- Here comes the script -- ##
from thialfi.logger import *
import datetime
from app.models import *

## Only resend last 1 day of messages
dt_from=datetime.datetime.now()-datetime.timedelta(days=1)
for message in Message.objects.filter(dt_received__gt = dt_from, dt_acked__isnull = True):
    debug("{%d} Processing unACKed message: received=(%s) [%s] %s" % (message.id, message.dt_received, message.recipient.group.contact_primary.sms_number, message.sms_body))

    # If it hasn't yet been despatched do it now
    if not message.delivery_set.all():
        info("{%d} Despatching message to [%s]" % (message.id, message.recipient.group.contact_primary.sms_number))
        message.despatch()
        continue

    # Update delivery statuses, fetch replies
    for delivery in message.delivery_set.all():
        if not message.dt_delivered:
            delivery.update_status()
            info("{%d} Updated delivery {%d} status: %s->%s : %s" % (message.id, delivery.id, delivery.dt_despatched, delivery.contact.sms_number, delivery.status))
        if not message.dt_acked:
            debug("{%d} Getting replies for delivery {%d}." % (message.id, delivery.id))
            delivery.get_replies()
            for reply in delivery.reply_set.all():
                info("{%d} Received reply: %s [%s] %s" % (message.id, reply.sender, reply.dt_received, reply.message))

    if message.dt_acked:
        continue

    # See if it needs to be escalated
    message.perform_escalation()
