#!/usr/bin/env python

## -- Python Setup -- ##
import os.path
import sys

PROJECT_ROOT = os.path.normpath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, os.path.join(PROJECT_ROOT, '..'))

## -- Django Setup -- ##
from django.core.management import setup_environ
from thialfi import settings
setup_environ(settings)

## -- Here comes the script -- ##
from thialfi.logger import *
from datetime import datetime, timedelta
from time import sleep
from app.models import *

last_run_timestamp = datetime.fromtimestamp(0)
while True:
    wait_sec = 60 - (datetime.now() - last_run_timestamp).total_seconds()
    if wait_sec > 0:
        #debug("sleeping %d sec..." % wait_sec)
        sleep(wait_sec)
    last_run_timestamp = datetime.now()

    ## Only resend last 1 day of messages
    dt_from = datetime.now() - timedelta(days=1)
    messages = Message.objects.filter(dt_received__gt = dt_from)
    debug("Processing %d messages from %s" % (len(messages), dt_from))
    for message in messages:
        if message.get_status('acked'):
            continue

        # If it hasn't yet been despatched do it now
        if not message.delivery_set.all():
            info("{%d} Despatching message to [%s]" % (message.id, message.recipient.group.contact_primary.sms_number))
            message.despatch()
            continue

        # Update delivery statuses, fetch replies
        for delivery in message.delivery_set.all():
            if not message.get_status('delivered'):
                delivery.update_status()
                info("{%d} Updated delivery {%d} status: %s->%s : %s" % (message.id, delivery.id, delivery.dt_despatched, delivery.contact.sms_number, delivery.status))
            if message.recipient.require_ack_min > 0 and not message.get_status('acked'):
                debug("{%d} Getting replies for delivery {%d}." % (message.id, delivery.id))
                delivery.get_replies()
                for reply in delivery.reply_set.all():
                    info("{%d} Received reply: %s [%s] %s" % (message.id, reply.sender, reply.dt_received, reply.message))

        if message.get_status('acked'):
            continue

        # See if it needs to be escalated
        message.perform_escalation()
