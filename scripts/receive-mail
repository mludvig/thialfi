#!/usr/bin/env python

## -- Python Setup -- ##
import os
import sys

PROJECT_ROOT = os.path.normpath(os.path.join(os.path.dirname(__file__), ".."))
sys.path.insert(0, PROJECT_ROOT)
sys.path.insert(0, os.path.join(PROJECT_ROOT, '..'))

## -- Django Setup -- ##
from django.core.management import setup_environ
from thialfi import settings
setup_environ(settings)

## -- Here comes the script -- ##
import re
import email
import base64

from app.models import *
from thialfi.logger import *

def find_text_plain(part):
    # Multipart container
    if part.is_multipart():
        for child in part.get_payload():
            textplain = find_text_plain(child)
            if textplain:
                return textplain
        return ""

    # Not Multipart, not text/plain
    if part.get_content_type() != "text/plain":
        return ""

    # Here we go .. text/plain
    payload = part.get_payload()
    if part.get("content-transfer-encoding") == "base64":
        return base64.decodestring(payload)
    if part.get("content-transfer-encoding") == "quoted-printable":
        return email.quopriMIME.decode(payload)
    return payload

# Get the sender and recipient from command line args
try:
    sender = sys.argv[1]
    recipients = sys.argv[2:]
except IndexError:
    error("Not enough arguments: argv=%r" % sys.argv)
    sys.exit(1)

# Read in the message
message_email = email.message_from_file(sys.stdin)

info("MAIL FROM: %s" % sender)
info("RCPT TO(%d): %s" % (len(recipients), ",".join(recipients)))

info("Subject: %s" % message_email.get("subject"))
info("Message-ID: %s" % message_email.get("message-id").strip("<>()"))

success = False
for recipient in recipients:
    m = re.match("\s*(.*)@(.*)", recipient)
    if not m:
        error("Invalid recipient: %r" % recipient)
        continue
    rcpt_name, domain = m.groups(0)
    rcpt = Recipient.objects.filter(address = rcpt_name)
    if not rcpt:
        error("Recipient not registered: %s" % recipient)
        continue
    msg = Message(recipient = rcpt[0])
    msg.header, msg.body = message_email.as_string().split("\n\n", 1)
    msg.hdr_sender = sender
    msg.hdr_recipient = recipient
    msg.hdr_message_id = message_email.get("message-id").strip("<>()")
    msg.hdr_subject = message_email.get("subject")
    text_plain_body = find_text_plain(message_email)
    ## Format SMS text - this should be configurable (per-sender rules?)
    msg.sms_body = str(msg.recipient) + "#" + msg.hdr_subject[:55] + "#" + text_plain_body[:65].strip()
    msg.save()

    info("Message: %s" % msg.sms_body)
    info("Contact: %s" % msg.recipient.group.contact_primary)
    msg.despatch()
    success = True

if not success:
    sys.exit(os.EX_UNAVAILABLE)
